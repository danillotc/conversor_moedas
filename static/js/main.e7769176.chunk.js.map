{"version":3,"sources":["components/Conversor.tsx","components/Adicionador.jsx","App.js","serviceWorker.js","index.js"],"names":["useState","moedas","setMoedas","moedaA","setMoedaA","moedaB","setMoedaB","qtd","setQtd","resultado","setResultado","useEffect","fetch","then","json","rates","Object","keys","push","sort","url","cotacao","parseFloat","valorConvertido","Number","toFixed","className","placeholder","type","onChange","event","aConverter","target","value","name","id","moedaSelecionada","map","moeda","key","props","onClick","App","conversores","setConversores","length","conversoresExtras","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4RAGe,G,YAAA,WAAM,MAGWA,mBAAmB,IAH9B,mBAGVC,EAHU,KAGFC,EAHE,OAIWF,mBAAS,IAJpB,mBAIVG,EAJU,KAIFC,EAJE,OAKWJ,mBAAS,IALpB,mBAKVK,EALU,KAKFC,EALE,OAMKN,mBAAiB,GANtB,mBAMVO,EANU,KAMLC,EANK,OAOiBR,mBAAiB,GAPlC,mBAOVS,EAPU,KAOCC,EAPD,KAqDjB,OA3CAC,qBAAW,WAEPC,MADU,0CAELC,MAAK,SAAAJ,GAAS,OAAIA,EAAUK,UAC5BD,MAAM,SAAAC,GACH,IAAIC,EAAQC,OAAOC,KAAKH,EAAI,OAC5BC,EAAMG,KAAK,OACXH,EAAMI,OACNjB,EAAUa,QAEnB,IAmBHJ,qBAAW,WACP,IAAIS,EAAG,sDAAkDjB,EAAlD,oBAAoEE,GAC3EO,MAAMQ,GACDP,MAAK,SAAAJ,GACF,OAAOA,EAAUK,UAEpBD,MAAK,SAAAC,GACF,IAAIO,EAAUC,WAAWR,EAAI,MAAUT,IACnCkB,EAAkBC,QAAQjB,EAAMc,GAASI,QAAQ,IACrDf,EAAaa,QAEtB,CAACpB,EAAQE,EAAQE,IAIhB,yBAAKmB,UAAU,aAEX,uCAEI,2BAAOC,YAAY,aAAaD,UAAU,kBAAkBE,KAAK,SAASC,SAnCtF,SAAoBC,GAChB,IAAMC,EAAaP,OAAOF,WAAWQ,EAAME,OAAOC,OAAOR,QAAQ,IACjEjB,EAAOuB,OAqCH,gCAEI,4BAAQG,KAAK,SAASC,GAAG,SAASN,SApC9C,SAAuBC,GACnB,IAAMM,EAAmBN,EAAME,OAAOC,MACtC7B,EAAUgC,KAmCE,iCACCnC,EAAOoC,KAAI,SAAAC,GAAK,OACb,4BAAQC,IAAKD,EAAOL,MAAOK,GAAQA,OAL/C,OAUI,4BAAQJ,KAAK,SAASC,GAAG,SAASN,SAvC9C,SAAuBC,GACnB,IAAMM,EAAmBN,EAAME,OAAOC,MACtC3B,EAAU8B,KAsCE,iCACCnC,EAAOoC,KAAI,SAAAC,GAAK,OACb,4BAAQC,IAAKD,EAAOL,MAAOK,GAAQA,QAK/C,4BACK7B,GAAaN,GAAUE,EACtBI,EACA,MCnFH,G,MAAA,SAAC+B,GACZ,OACI,oCACI,4BAAQd,UAAU,iBAAiBe,QAASD,EAAMC,SAAlD,QC2BGC,MA1Bf,WAAgB,IAAD,EAEyB1C,mBAAU,IAFnC,mBAEN2C,EAFM,KAEOC,EAFP,KAYb,OACE,yBAAKlB,UAAU,OACb,mDACA,yBAAKA,UAAU,sBACb,kBAAC,EAAD,MACCiB,EACAA,EAAYE,QAAQ,EACnB,kBAAC,EAAD,CAAaJ,QAfrB,WAEE,IADA,IAAMK,EAAoB,GACjBC,EAAE,EAAGA,EAAEJ,EAAYE,OAAO,EAAGE,IACpCD,EAAkB5B,KAAK,kBAAC,EAAD,OAEzB0B,EAAeE,MAWT,+CCfUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7769176.chunk.js","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport './Conversor.css'\n\nexport default () => {\n    \n    // Declarando estados\n    const [moedas, setMoedas] = useState<string[]>([]);\n    const [moedaA, setMoedaA] = useState(\"\");\n    const [moedaB, setMoedaB] = useState(\"\");\n    const [qtd, setQtd] = useState<number>(0);\n    const [resultado, setResultado] = useState<number>(0);\n\n    // Obtendo lista de moedas disponíveis\n    useEffect (() => {\n        let url = \"https://api.exchangeratesapi.io/latest\"\n        fetch(url)\n            .then(resultado => resultado.json())\n            .then (json => {\n                let rates = Object.keys(json['rates']);\n                rates.push('EUR');\n                rates.sort();\n                setMoedas(rates);\n            })    \n    }, [])\n    \n    // Funções Handle    \n    function qtdHandler(event: ChangeEvent<HTMLInputElement>) {\n        const aConverter = Number(parseFloat(event.target.value).toFixed(2));\n        setQtd(aConverter);\n    }\n    \n    function moedaAHandler(event: ChangeEvent<HTMLSelectElement>) {\n        const moedaSelecionada = event.target.value;\n        setMoedaA(moedaSelecionada);\n    }\n    \n    function moedaBHandler(event: ChangeEvent<HTMLSelectElement>) {\n        const moedaSelecionada = event.target.value;\n        setMoedaB(moedaSelecionada);\n    }\n    \n    // Conversão\n    useEffect (() => {\n        let url = `https://api.exchangeratesapi.io/latest?base=${moedaA}&symbols=${moedaB}`\n        fetch(url)\n            .then(resultado => {\n                return resultado.json()\n            })\n            .then(json =>{\n                let cotacao = parseFloat(json['rates'][moedaB]);\n                let valorConvertido = Number((qtd * cotacao).toFixed(2));\n                setResultado(valorConvertido);\n            })\n    }, [moedaA, moedaB, qtd])\n\n    // HTML retornado    \n    return (\n        <div className=\"conversor\">\n\n            <p>Converter \n    \n                <input placeholder=\"quantidade\" className='inputQuantidade' type='number' onChange={qtdHandler}/>\n            \n            </p>\n\n            <p>\n                de\n                <select name=\"moedas\" id=\"moedas\" onChange={moedaAHandler}>\n                    <option></option>\n                    {moedas.map(moeda => \n                        <option key={moeda} value={moeda}>{moeda}</option>    \n                    )}\n                </select>\n                \n                para \n                <select name=\"moedas\" id=\"moedas\" onChange={moedaBHandler}>\n                    <option></option>\n                    {moedas.map(moeda => \n                        <option key={moeda} value={moeda}>{moeda}</option>    \n                    )}\n                </select>\n            </p>\n\n            <h2>\n                {resultado && moedaA && moedaB \n                ? resultado \n                : 0}\n            </h2>\n        </div>\n    )\n}","import React from 'react'\nimport './Adicionador.css'\n\nexport default (props) => {\n    return (\n        <>\n            <button className=\"botaoAdicionar\" onClick={props.onClick}>+</button>\n        </>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\n\nimport Conversor from './components/Conversor'\n// import ConversoresExtra from './components/ConversoresExtra'\nimport Adicionador from './components/Adicionador'\n\nfunction App() {\n\n  const [conversores, setConversores] = useState ([]);\n  \n  function onClick () {\n    const conversoresExtras = [];\n    for (let i=0; i<conversores.length+1; i++) {\n      conversoresExtras.push(<Conversor />);\n    }\n    setConversores(conversoresExtras);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Conversor de moedas</h1>\n      <div className=\"ConversorContainer\">\n        <Conversor />\n        {conversores}\n        {conversores.length<=4\n        ? <Adicionador onClick={onClick}/>\n        : \"Esta viagem é realmente necessária?\"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}